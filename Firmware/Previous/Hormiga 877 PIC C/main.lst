CCS PCM C Compiler, Version 4.104, 5967               05-Jun-20 18:31

               Filename: C:\Users\MikyDesktop\Google Drive\PC Escritorio\PIC16F877A\main.lst

               ROM used: 858 words (10%)
                         Largest free fragment is 2048
               RAM used: 16 (4%) at main() level
                         29 (8%) worst case
               Stack:    6 locations

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   33B
0003:  NOP
.................... #include <Hormiga877.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=8000000) 
*
0048:  MOVLW  2F
0049:  MOVWF  04
004A:  BCF    03.7
004B:  MOVF   00,W
004C:  BTFSC  03.2
004D:  GOTO   05B
004E:  MOVLW  02
004F:  MOVWF  78
0050:  CLRF   77
0051:  DECFSZ 77,F
0052:  GOTO   051
0053:  DECFSZ 78,F
0054:  GOTO   050
0055:  MOVLW  97
0056:  MOVWF  77
0057:  DECFSZ 77,F
0058:  GOTO   057
0059:  DECFSZ 00,F
005A:  GOTO   04E
005B:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0070:  MOVLW  0F
0071:  BSF    03.5
0072:  ANDWF  08,W
0073:  IORLW  F0
0074:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0075:  BCF    03.5
0076:  BSF    08.2
....................    delay_cycles(1); 
0077:  NOP
....................    lcd_output_enable(1); 
0078:  BSF    08.0
....................    delay_cycles(1); 
0079:  NOP
....................    high = lcd_read_nibble(); 
007A:  CALL   069
007B:  MOVF   78,W
007C:  MOVWF  36
....................        
....................    lcd_output_enable(0); 
007D:  BCF    08.0
....................    delay_cycles(1); 
007E:  NOP
....................    lcd_output_enable(1); 
007F:  BSF    08.0
....................    delay_us(1); 
0080:  GOTO   081
....................    low = lcd_read_nibble(); 
0081:  CALL   069
0082:  MOVF   78,W
0083:  MOVWF  35
....................        
....................    lcd_output_enable(0); 
0084:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0085:  MOVLW  0F
0086:  BSF    03.5
0087:  ANDWF  08,W
0088:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0089:  BCF    03.5
008A:  SWAPF  36,W
008B:  MOVWF  77
008C:  MOVLW  F0
008D:  ANDWF  77,F
008E:  MOVF   77,W
008F:  IORWF  35,W
0090:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0069:  MOVF   08,W
006A:  MOVWF  77
006B:  SWAPF  08,W
006C:  ANDLW  0F
006D:  MOVWF  78
....................   #endif 
.................... } 
006E:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
005C:  SWAPF  36,W
005D:  ANDLW  F0
005E:  MOVWF  77
005F:  MOVLW  0F
0060:  ANDWF  08,W
0061:  IORWF  77,W
0062:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0063:  NOP
....................    lcd_output_enable(1); 
0064:  BSF    08.0
....................    delay_us(2); 
0065:  GOTO   066
0066:  GOTO   067
....................    lcd_output_enable(0); 
0067:  BCF    08.0
.................... } 
0068:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_output_rs(0); 
*
006F:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0091:  MOVF   78,W
0092:  MOVWF  35
0093:  BTFSC  35.7
0094:  GOTO   070
....................    lcd_output_rs(address); 
0095:  BTFSS  33.0
0096:  BCF    08.1
0097:  BTFSC  33.0
0098:  BSF    08.1
....................    delay_cycles(1); 
0099:  NOP
....................    lcd_output_rw(0); 
009A:  BCF    08.2
....................    delay_cycles(1); 
009B:  NOP
....................    lcd_output_enable(0); 
009C:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
009D:  SWAPF  34,W
009E:  MOVWF  35
009F:  MOVLW  0F
00A0:  ANDWF  35,F
00A1:  MOVF   35,W
00A2:  MOVWF  36
00A3:  CALL   05C
....................    lcd_send_nibble(n & 0xf); 
00A4:  MOVF   34,W
00A5:  ANDLW  0F
00A6:  MOVWF  35
00A7:  MOVWF  36
00A8:  CALL   05C
.................... } 
00A9:  RETURN
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
*
013C:  MOVLW  0F
013D:  BSF    03.5
013E:  ANDWF  08,W
013F:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0140:  BCF    08.0
....................    lcd_rs_tris(); 
0141:  BCF    08.1
....................    lcd_rw_tris(); 
0142:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0143:  BCF    03.5
0144:  BCF    08.1
....................    lcd_output_rw(0); 
0145:  BCF    08.2
....................    lcd_output_enable(0); 
0146:  BCF    08.0
....................      
....................    delay_ms(15); 
0147:  MOVLW  0F
0148:  MOVWF  2F
0149:  CALL   048
....................    for(i=1;i<=3;++i) 
014A:  MOVLW  01
014B:  MOVWF  2B
014C:  MOVF   2B,W
014D:  SUBLW  03
014E:  BTFSS  03.0
014F:  GOTO   158
....................    { 
....................        lcd_send_nibble(3); 
0150:  MOVLW  03
0151:  MOVWF  36
0152:  CALL   05C
....................        delay_ms(5); 
0153:  MOVLW  05
0154:  MOVWF  2F
0155:  CALL   048
....................    } 
0156:  INCF   2B,F
0157:  GOTO   14C
....................      
....................    lcd_send_nibble(2); 
0158:  MOVLW  02
0159:  MOVWF  36
015A:  CALL   05C
....................    for(i=0;i<=3;++i) 
015B:  CLRF   2B
015C:  MOVF   2B,W
015D:  SUBLW  03
015E:  BTFSS  03.0
015F:  GOTO   169
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0160:  MOVF   2B,W
0161:  CALL   004
0162:  MOVWF  2C
0163:  CLRF   33
0164:  MOVF   2C,W
0165:  MOVWF  34
0166:  CALL   06F
0167:  INCF   2B,F
0168:  GOTO   15C
.................... } 
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
00BE:  DECFSZ 30,W
00BF:  GOTO   0C1
00C0:  GOTO   0C4
....................       address=LCD_LINE_TWO; 
00C1:  MOVLW  40
00C2:  MOVWF  31
....................    else 
00C3:  GOTO   0C5
....................       address=0; 
00C4:  CLRF   31
....................       
....................    address+=x-1; 
00C5:  MOVLW  01
00C6:  SUBWF  2F,W
00C7:  ADDWF  31,F
....................    lcd_send_byte(0,0x80|address); 
00C8:  MOVF   31,W
00C9:  IORLW  80
00CA:  MOVWF  32
00CB:  CLRF   33
00CC:  MOVF   32,W
00CD:  MOVWF  34
00CE:  CALL   06F
.................... } 
00CF:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
00D0:  MOVF   2E,W
00D1:  XORLW  0C
00D2:  BTFSC  03.2
00D3:  GOTO   0DB
00D4:  XORLW  06
00D5:  BTFSC  03.2
00D6:  GOTO   0E3
00D7:  XORLW  02
00D8:  BTFSC  03.2
00D9:  GOTO   0E9
00DA:  GOTO   0EE
....................       case '\f'   :  lcd_send_byte(0,1); 
00DB:  CLRF   33
00DC:  MOVLW  01
00DD:  MOVWF  34
00DE:  CALL   06F
....................                      delay_ms(2); 
00DF:  MOVLW  02
00E0:  MOVWF  2F
00E1:  CALL   048
....................                      break; 
00E2:  GOTO   0F4
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E3:  MOVLW  01
00E4:  MOVWF  2F
00E5:  MOVLW  02
00E6:  MOVWF  30
00E7:  CALL   0BE
00E8:  GOTO   0F4
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E9:  CLRF   33
00EA:  MOVLW  10
00EB:  MOVWF  34
00EC:  CALL   06F
00ED:  GOTO   0F4
....................       
....................       default     : lcd_send_byte(1,c);     break; 
00EE:  MOVLW  01
00EF:  MOVWF  33
00F0:  MOVF   2E,W
00F1:  MOVWF  34
00F2:  CALL   06F
00F3:  GOTO   0F4
....................    } 
.................... } 
00F4:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #use delay (clock=8000000) 
*
00AA:  MOVLW  2B
00AB:  MOVWF  04
00AC:  BCF    03.7
00AD:  MOVF   00,W
00AE:  BTFSC  03.2
00AF:  GOTO   0BD
00B0:  MOVLW  02
00B1:  MOVWF  78
00B2:  CLRF   77
00B3:  DECFSZ 77,F
00B4:  GOTO   0B3
00B5:  DECFSZ 78,F
00B6:  GOTO   0B2
00B7:  MOVLW  97
00B8:  MOVWF  77
00B9:  DECFSZ 77,F
00BA:  GOTO   0B9
00BB:  DECFSZ 00,F
00BC:  GOTO   0B0
00BD:  RETURN
.................... #define LCD_RS_PIN      PIN_D1                                    
.................... #define LCD_RW_PIN      PIN_D2  
.................... #define LCD_ENABLE_PIN  PIN_D3  
.................... #define LCD_DATA4       PIN_D4                                     
.................... #define LCD_DATA5       PIN_D5                                     
.................... #define LCD_DATA6       PIN_D6                            
.................... #define LCD_DATA7       PIN_D7 
....................  
.................... #define HIGH 0x01 
.................... #define LOW 0x00 
.................... #define OUTPUT 0x00 
.................... #define INPUT 0x01 
.................... //Function Aplications 
.................... char AnalogKeypadRead(unsigned int channel); 
.................... void proceso(void); 
.................... ////////// 
.................... void setup(void); 
.................... void loop(void); 
.................... void ConfiguracionInicial(void); 
.................... void pinMode(unsigned int pin,unsigned int direction); 
.................... void digitalWrite(unsigned int pin, unsigned int value); 
.................... void pinMode(unsigned int pin,unsigned int direction); 
.................... unsigned int digitalRead(unsigned int pin); 
.................... int analogWrite(unsigned int channel, unsigned int value); 
.................... unsigned int analogRead(unsigned int channel); 
.................... int main(void) 
.................... { 
*
033B:  CLRF   04
033C:  BCF    03.7
033D:  MOVLW  1F
033E:  ANDWF  03,F
033F:  MOVLW  30
0340:  MOVWF  21
0341:  CLRF   23
0342:  CLRF   24
0343:  CLRF   28
0344:  CLRF   29
0345:  CLRF   2A
0346:  BSF    03.5
0347:  BSF    1F.0
0348:  BSF    1F.1
0349:  BSF    1F.2
034A:  BCF    1F.3
034B:  MOVLW  07
034C:  MOVWF  1C
....................    ConfiguracionInicial(); 
*
0353:  GOTO   010
....................    setup(); 
0354:  GOTO   13B
....................    while(1) 
....................    { 
....................       loop(); 
0355:  GOTO   2A6
....................    } 
0356:  GOTO   355
....................    return 0; 
0357:  MOVLW  00
0358:  MOVWF  78
.................... } 
.................... unsigned int digitalRead(unsigned int pin) 
.................... { 
0359:  SLEEP
....................    switch(pin) 
....................    { 
....................       case 0: 
....................          return input_state(PIN_C7);  
....................       break; 
....................       case 1: 
....................          return input_state(PIN_C6); 
....................       break; 
....................       case 2: 
....................          return input_state(PIN_C5); 
....................       break; 
....................       case 3: 
....................          return input_state(PIN_C4); 
....................       break; 
....................       case 4: 
....................          return input_state(PIN_C3); 
....................       break; 
....................       case 5: 
....................          return input_state(PIN_C2); 
....................       break; 
....................       case 6: 
....................          return input_state(PIN_C1); 
....................       break; 
....................       case 7: 
....................          return input_state(PIN_C0); 
....................       break; 
....................       case 8: 
....................          return input_state(PIN_B0); 
....................       break; 
....................       case 9: 
....................          return input_state(PIN_B1); 
....................       break; 
....................       case 10: 
....................          return input_state(PIN_B2); 
....................       break; 
....................       case 11: 
....................          return input_state(PIN_B3); 
....................       break; 
....................       case 12: 
....................          return input_state(PIN_B4); 
....................       break; 
....................       case 13: 
....................          return input_state(PIN_B5); 
....................       break; 
....................       case 14: 
....................          return input_state(PIN_B6); 
....................       break; 
....................       case 15: 
....................          return input_state(PIN_B7); 
....................       break; 
....................       case 16: 
....................          return input_state(PIN_D0); 
....................       break; 
....................       case 17: 
....................          return input_state(PIN_D1); 
....................       break; 
....................       case 18: 
....................          return input_state(PIN_D2); 
....................       break; 
....................       case 19: 
....................          return input_state(PIN_D3); 
....................       break; 
....................       case 20: 
....................          return input_state(PIN_D4); 
....................       break; 
....................       case 21: 
....................          return input_state(PIN_D5); 
....................       break; 
....................       case 22: 
....................          return input_state(PIN_D6); 
....................       break; 
....................       case 23: 
....................          return input_state(PIN_D7); 
....................       break; 
....................       case 24: 
....................          return input_state(PIN_A4); 
....................       break; 
....................    } 
.................... } 
.................... void pinMode(unsigned int pin,unsigned int direction) 
.................... { 
....................    switch(pin) 
....................    { 
....................       case 0: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_C7); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_C7); 
....................          } 
....................       break; 
....................       case 1: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_C6); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_C6); 
....................          } 
....................       break; 
....................       case 2: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_C5); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_C5); 
....................          } 
....................       break; 
....................       case 3: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_C4); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_C4); 
....................          } 
....................       break; 
....................       case 4: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_C3); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_C3); 
....................          } 
....................       break; 
....................       case 5: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_C2); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_C2); 
....................          } 
....................       break; 
....................       case 6: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_C1); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_C1); 
....................          } 
....................       break; 
....................       case 7: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_C0); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_C0); 
....................          } 
....................       break; 
....................       case 8: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_B0); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_B0); 
....................          } 
....................       break; 
....................       case 9: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_B1); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_B1); 
....................          } 
....................       break; 
....................       case 10: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_B2); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_B2); 
....................          } 
....................       break; 
....................       case 11: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_B3); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_B3); 
....................          } 
....................       break; 
....................       case 12: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_B4); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_B4); 
....................          } 
....................       break; 
....................       case 13: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_B5); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_B5); 
....................          } 
....................       break; 
....................       case 14: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_B6); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_B6); 
....................          } 
....................       break; 
....................       case 15: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_B7); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_B7); 
....................          } 
....................       break; 
....................       case 16: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_D0); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_D0); 
....................          } 
....................       break; 
....................       case 17: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_D1); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_D1); 
....................          } 
....................       break; 
....................       case 18: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_D2); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_D2); 
....................          } 
....................       break; 
....................       case 19: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_D3); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_D3); 
....................          } 
....................       break; 
....................       case 20: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_D4); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_D4); 
....................          } 
....................       break; 
....................       case 21: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_D5); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_D5); 
....................          } 
....................       break; 
....................       case 22: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_D6); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_D6); 
....................          } 
....................       break; 
....................       case 23: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_D7); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_D7); 
....................          } 
....................       break; 
....................       case 24: 
....................          if(direction) 
....................          { 
....................             output_float(PIN_A4); 
....................          } 
....................          else 
....................          { 
....................             output_drive(PIN_A4); 
....................          } 
....................       break; 
....................    } 
.................... } 
.................... void digitalWrite(unsigned int pin, unsigned int value) 
.................... { 
....................    switch(pin) 
....................    { 
....................       case 0: 
....................          if(value) 
....................          { 
....................             output_high(PIN_C7); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_C7); 
....................          } 
....................           
....................       break; 
....................       case 1: 
....................          if(value) 
....................          { 
....................             output_high(PIN_C6); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_C6); 
....................          } 
....................           
....................       break; 
....................       case 2: 
....................          if(value) 
....................          { 
....................             output_high(PIN_C5); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_C5); 
....................          } 
....................           
....................       break; 
....................       case 3: 
....................          if(value) 
....................          { 
....................             output_high(PIN_C4); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_C4); 
....................          } 
....................           
....................       break; 
....................       case 4: 
....................          if(value) 
....................          { 
....................             output_high(PIN_C3); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_C3); 
....................          } 
....................           
....................       break; 
....................       case 5: 
....................          if(value) 
....................          { 
....................             output_high(PIN_C2); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_C2); 
....................          } 
....................           
....................       break; 
....................       case 6: 
....................          if(value) 
....................          { 
....................             output_high(PIN_C1); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_C1); 
....................          } 
....................           
....................       break; 
....................       case 7: 
....................          if(value) 
....................          { 
....................             output_high(PIN_C0); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_C0); 
....................          } 
....................           
....................       break; 
....................       case 8: 
....................          if(value) 
....................          { 
....................             output_high(PIN_B0); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_B0); 
....................          } 
....................           
....................       break; 
....................       case 9: 
....................          if(value) 
....................          { 
....................             output_high(PIN_B1); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_B1); 
....................          } 
....................           
....................       break; 
....................       case 10: 
....................          if(value) 
....................          { 
....................             output_high(PIN_B2); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_B2); 
....................          } 
....................             
....................       break; 
....................       case 11: 
....................          if(value) 
....................          { 
....................             output_high(PIN_B3); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_B3); 
....................          } 
....................           
....................       break; 
....................       case 12: 
....................          if(value) 
....................          { 
....................             output_high(PIN_B4); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_B4); 
....................          } 
....................           
....................       break; 
....................       case 13: 
....................          if(value) 
....................          { 
....................             output_high(PIN_B5); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_B5); 
....................          } 
....................           
....................       break; 
....................       case 14: 
....................          if(value) 
....................          { 
....................             output_high(PIN_B6); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_B6); 
....................          } 
....................           
....................       break; 
....................       case 15: 
....................          if(value) 
....................          { 
....................             output_high(PIN_B7); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_B7); 
....................          } 
....................           
....................       break; 
....................       case 16: 
....................          if(value) 
....................          { 
....................             output_high(PIN_D0); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_D0); 
....................          } 
....................           
....................       break; 
....................       case 17: 
....................          if(value) 
....................          { 
....................             output_high(PIN_D1); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_D1); 
....................          } 
....................           
....................       break; 
....................       case 18: 
....................          if(value) 
....................          { 
....................             output_high(PIN_D2); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_D2); 
....................          } 
....................           
....................       break; 
....................       case 19: 
....................          if(value) 
....................          { 
....................             output_high(PIN_D3); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_D3); 
....................          } 
....................           
....................       break; 
....................       case 20: 
....................          if(value) 
....................          { 
....................             output_high(PIN_D4); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_D4); 
....................          } 
....................           
....................       break; 
....................       case 21: 
....................          if(value) 
....................          { 
....................             output_high(PIN_D5); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_D5); 
....................          } 
....................           
....................       break; 
....................       case 22: 
....................          if(value) 
....................          { 
....................             output_high(PIN_D6); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_D6); 
....................          } 
....................           
....................       break; 
....................       case 23: 
....................          if(value) 
....................          { 
....................             output_high(PIN_D7); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_D7); 
....................          } 
....................           
....................       break; 
....................       case 24: 
....................          if(value) 
....................          { 
....................             output_high(PIN_A4); 
....................          } 
....................          else 
....................          { 
....................             output_low(PIN_A4); 
....................          } 
....................           
....................       break; 
....................    } 
.................... } 
.................... int analogWrite(unsigned int channel, unsigned int value) 
.................... { 
....................    switch(channel) 
....................    { 
....................       case 5: 
....................          set_pwm1_duty(value); 
....................          return 1; 
....................       break; 
....................       case 6: 
....................          set_pwm2_duty(value); 
....................            return 1; 
....................       break; 
....................       default: 
....................          return -1; 
....................       break; 
....................    } 
.................... } 
.................... unsigned int analogRead(unsigned int channel) 
.................... { 
....................    switch(channel) 
....................    { 
*
0195:  MOVF   2D,W
0196:  ADDLW  FB
0197:  BTFSC  03.0
0198:  GOTO   1F0
0199:  ADDLW  05
019A:  GOTO   1F5
....................       case 0: 
....................          set_adc_channel(0); 
019B:  MOVLW  00
019C:  MOVWF  78
019D:  MOVF   1F,W
019E:  ANDLW  C7
019F:  IORWF  78,W
01A0:  MOVWF  1F
....................          return read_adc(); 
01A1:  BSF    1F.2
01A2:  BTFSC  1F.2
01A3:  GOTO   1A2
01A4:  MOVF   1E,W
01A5:  MOVWF  7A
01A6:  BSF    03.5
01A7:  MOVF   1E,W
01A8:  MOVWF  78
01A9:  GOTO   1F1
....................       break; 
01AA:  BCF    03.5
01AB:  GOTO   1F0
....................       case 1: 
....................          set_adc_channel(1); 
01AC:  MOVLW  08
01AD:  MOVWF  78
01AE:  MOVF   1F,W
01AF:  ANDLW  C7
01B0:  IORWF  78,W
01B1:  MOVWF  1F
....................          return read_adc(); 
01B2:  BSF    1F.2
01B3:  BTFSC  1F.2
01B4:  GOTO   1B3
01B5:  MOVF   1E,W
01B6:  MOVWF  7A
01B7:  BSF    03.5
01B8:  MOVF   1E,W
01B9:  MOVWF  78
01BA:  GOTO   1F1
....................       break; 
01BB:  BCF    03.5
01BC:  GOTO   1F0
....................       case 2: 
....................          set_adc_channel(2); 
01BD:  MOVLW  10
01BE:  MOVWF  78
01BF:  MOVF   1F,W
01C0:  ANDLW  C7
01C1:  IORWF  78,W
01C2:  MOVWF  1F
....................          return read_adc(); 
01C3:  BSF    1F.2
01C4:  BTFSC  1F.2
01C5:  GOTO   1C4
01C6:  MOVF   1E,W
01C7:  MOVWF  7A
01C8:  BSF    03.5
01C9:  MOVF   1E,W
01CA:  MOVWF  78
01CB:  GOTO   1F1
....................       break; 
01CC:  BCF    03.5
01CD:  GOTO   1F0
....................       case 3: 
....................          set_adc_channel(3); 
01CE:  MOVLW  18
01CF:  MOVWF  78
01D0:  MOVF   1F,W
01D1:  ANDLW  C7
01D2:  IORWF  78,W
01D3:  MOVWF  1F
....................          return read_adc(); 
01D4:  BSF    1F.2
01D5:  BTFSC  1F.2
01D6:  GOTO   1D5
01D7:  MOVF   1E,W
01D8:  MOVWF  7A
01D9:  BSF    03.5
01DA:  MOVF   1E,W
01DB:  MOVWF  78
01DC:  GOTO   1F1
....................       break; 
01DD:  BCF    03.5
01DE:  GOTO   1F0
....................       case 4: 
....................          set_adc_channel(5); 
01DF:  MOVLW  28
01E0:  MOVWF  78
01E1:  MOVF   1F,W
01E2:  ANDLW  C7
01E3:  IORWF  78,W
01E4:  MOVWF  1F
....................          return read_adc(); 
01E5:  BSF    1F.2
01E6:  BTFSC  1F.2
01E7:  GOTO   1E6
01E8:  MOVF   1E,W
01E9:  MOVWF  7A
01EA:  BSF    03.5
01EB:  MOVF   1E,W
01EC:  MOVWF  78
01ED:  GOTO   1F1
....................       break; 
01EE:  BCF    03.5
01EF:  GOTO   1F0
01F0:  BSF    03.5
....................    } 
.................... } 
01F1:  BCF    03.5
01F2:  BCF    0A.3
01F3:  BCF    0A.4
01F4:  GOTO   201 (RETURN)
.................... void ConfiguracionInicial(void) 
.................... { 
....................    setup_adc_ports(AN0_AN1_AN2_AN3_AN4); 
*
0010:  BSF    03.5
0011:  BCF    1F.0
0012:  BSF    1F.1
0013:  BCF    1F.2
0014:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_32); 
0015:  BCF    1F.6
0016:  BCF    03.5
0017:  BCF    1F.6
0018:  BSF    1F.7
0019:  BSF    03.5
001A:  BSF    1F.7
001B:  BCF    03.5
001C:  BSF    1F.0
....................    set_tris_e(0x07); 
001D:  BSF    03.5
001E:  BSF    09.1
001F:  BSF    09.1
0020:  BSF    09.1
....................    set_tris_a(0x3F); 
0021:  MOVLW  3F
0022:  MOVWF  05
....................    set_tris_b(0x00); 
0023:  MOVLW  00
0024:  MOVWF  06
....................    set_tris_c(0x00); 
0025:  MOVWF  07
0026:  BCF    03.5
0027:  MOVWF  20
....................    set_tris_d(0x00); 
0028:  BSF    03.5
0029:  MOVWF  08
....................    setup_ccp1(CCP_PWM); 
002A:  BCF    03.5
002B:  BCF    20.2
002C:  MOVF   20,W
002D:  BSF    03.5
002E:  MOVWF  07
002F:  BCF    03.5
0030:  BCF    07.2
0031:  MOVLW  0C
0032:  MOVWF  17
....................    setup_ccp2(CCP_PWM); 
0033:  BCF    20.1
0034:  MOVF   20,W
0035:  BSF    03.5
0036:  MOVWF  07
0037:  BCF    03.5
0038:  BCF    07.1
0039:  MOVLW  0C
003A:  MOVWF  1D
....................    set_pwm2_duty(0); 
003B:  CLRF   1B
....................    set_pwm1_duty(0); 
003C:  CLRF   15
....................    setup_timer_2(T2_DIV_BY_16, 250, 1); 
003D:  MOVLW  00
003E:  MOVWF  78
003F:  IORLW  06
0040:  MOVWF  12
0041:  MOVLW  FA
0042:  BSF    03.5
0043:  MOVWF  12
.................... } 
0044:  BCF    03.5
0045:  BCF    0A.3
0046:  BCF    0A.4
0047:  GOTO   354 (RETURN)
....................  
....................  
.................... #define NO_KEY 'n' 
....................  
.................... //Tareas : 
.................... /* 
....................    1. Buscar constantes de ADC para cada una de las teclas del Keypad. 
.................... */ 
.................... char key = '0'; 
.................... enum MaquinaEstados{Configuracion, Ejecucion,ConfiguracionDos}; 
.................... MaquinaEstados Estado; 
....................  
.................... int ValorMaximo = 0; 
.................... int ValorMinimo = 0; 
....................  
.................... unsigned int Casillas[3] = {0,0,0}; //{Unidades,Decenas,Centenas} 
*
0350:  CLRF   25
0351:  CLRF   26
0352:  CLRF   27
.................... unsigned int Valor = 0; // almacenara el numero final ingresado por KP. 
.................... unsigned int Contador = 0; //contara las casillas del vector; 
....................  
....................  
.................... int i=0; 
.................... void setup(void) 
.................... { 
....................    Estado = Configuracion; 
*
013B:  CLRF   22
....................    lcd_init(); 
....................    delay_ms(100); 
*
0169:  MOVLW  64
016A:  MOVWF  2B
016B:  CALL   0AA
....................    lcd_gotoxy(1,1); 
016C:  MOVLW  01
016D:  MOVWF  2F
016E:  MOVWF  30
016F:  CALL   0BE
....................    lcd_putc("Hola"); 
0170:  MOVLW  0C
0171:  BSF    03.6
0172:  MOVWF  0D
0173:  MOVLW  00
0174:  MOVWF  0F
0175:  BCF    03.6
0176:  CALL   0F5
....................    lcd_gotoxy(2,1); 
0177:  MOVLW  02
0178:  MOVWF  2F
0179:  MOVLW  01
017A:  MOVWF  30
017B:  CALL   0BE
....................    for(i=0;i<16;i++) 
017C:  CLRF   2A
017D:  MOVF   2A,W
017E:  SUBLW  0F
017F:  BTFSS  03.0
0180:  GOTO   18F
....................    { 
....................       lcd_putc("."); 
0181:  MOVLW  0F
0182:  BSF    03.6
0183:  MOVWF  0D
0184:  MOVLW  00
0185:  MOVWF  0F
0186:  BCF    03.6
0187:  CALL   0F5
....................       lcd_gotoxy(2,i); 
0188:  MOVLW  02
0189:  MOVWF  2F
018A:  MOVF   2A,W
018B:  MOVWF  30
018C:  CALL   0BE
....................    } 
018D:  INCF   2A,F
018E:  GOTO   17D
....................    delay_ms(100); 
018F:  MOVLW  64
0190:  MOVWF  2B
0191:  CALL   0AA
.................... } 
0192:  BCF    0A.3
0193:  BCF    0A.4
0194:  GOTO   355 (RETURN)
....................  
....................              
....................  
.................... void loop(void) 
.................... { 
....................    switch(Estado) 
....................    { 
*
02A6:  MOVF   22,W
02A7:  XORLW  00
02A8:  BTFSC  03.2
02A9:  GOTO   2B1
02AA:  XORLW  02
02AB:  BTFSC  03.2
02AC:  GOTO   2E7
02AD:  XORLW  03
02AE:  BTFSC  03.2
02AF:  GOTO   31D
02B0:  GOTO   338
....................       case Configuracion: 
....................          while(Contador <=2) 
....................          { 
02B1:  MOVF   29,W
02B2:  SUBLW  02
02B3:  BTFSS  03.0
02B4:  GOTO   2D3
....................             key = AnalogKeypadRead(0); 
02B5:  CLRF   2B
02B6:  CALL   1FE
02B7:  MOVF   78,W
02B8:  MOVWF  21
....................             if(key != NO_KEY) 
02B9:  MOVF   21,W
02BA:  SUBLW  6E
02BB:  BTFSC  03.2
02BC:  GOTO   2C6
....................             { 
....................                Casillas[Contador] = key - 48; 
02BD:  MOVLW  25
02BE:  ADDWF  29,W
02BF:  MOVWF  04
02C0:  BCF    03.7
02C1:  MOVLW  30
02C2:  SUBWF  21,W
02C3:  MOVWF  00
....................                Contador++; 
02C4:  INCF   29,F
....................                //Dibujar el Numero 
....................                 
....................             } 
....................             else if(key == 'A') //Boton Acknoledge 
02C5:  GOTO   2D2
02C6:  MOVF   21,W
02C7:  SUBLW  41
02C8:  BTFSS  03.2
02C9:  GOTO   2CD
....................             { 
....................                Contador = 3; 
02CA:  MOVLW  03
02CB:  MOVWF  29
....................             } 
....................             else if(key == 'B') //Boton Backspace 
02CC:  GOTO   2D2
02CD:  MOVF   21,W
02CE:  SUBLW  42
02CF:  BTFSS  03.2
02D0:  GOTO   2D2
....................             { 
....................                Contador = 0; 
02D1:  CLRF   29
....................             } 
....................          } 
02D2:  GOTO   2B1
....................          Contador = 0; 
02D3:  CLRF   29
....................          ValorMaximo = Casillas[0] + (Casillas[1] * 10) + (Casillas[2] * 100); 
02D4:  MOVF   26,W
02D5:  MOVWF  2C
02D6:  MOVLW  0A
02D7:  MOVWF  2D
02D8:  CALL   281
02D9:  MOVF   78,W
02DA:  ADDWF  25,W
02DB:  MOVWF  2B
02DC:  MOVF   27,W
02DD:  MOVWF  2C
02DE:  MOVLW  64
02DF:  MOVWF  2D
02E0:  CALL   281
02E1:  MOVF   78,W
02E2:  ADDWF  2B,W
02E3:  MOVWF  23
....................          Estado = ConfiguracionDos; 
02E4:  MOVLW  02
02E5:  MOVWF  22
....................       break; 
02E6:  GOTO   338
....................       case ConfiguracionDos: 
....................          while(Contador <=2) 
....................          { 
02E7:  MOVF   29,W
02E8:  SUBLW  02
02E9:  BTFSS  03.0
02EA:  GOTO   309
....................             key = AnalogKeypadRead(0); 
02EB:  CLRF   2B
02EC:  CALL   1FE
02ED:  MOVF   78,W
02EE:  MOVWF  21
....................             if(key != NO_KEY) 
02EF:  MOVF   21,W
02F0:  SUBLW  6E
02F1:  BTFSC  03.2
02F2:  GOTO   2FC
....................             { 
....................                Casillas[Contador] = key - 48; 
02F3:  MOVLW  25
02F4:  ADDWF  29,W
02F5:  MOVWF  04
02F6:  BCF    03.7
02F7:  MOVLW  30
02F8:  SUBWF  21,W
02F9:  MOVWF  00
....................                Contador++; 
02FA:  INCF   29,F
....................             } 
....................             else if(key == 'A') //Boton Acknoledge 
02FB:  GOTO   308
02FC:  MOVF   21,W
02FD:  SUBLW  41
02FE:  BTFSS  03.2
02FF:  GOTO   303
....................             { 
....................                Contador = 3; 
0300:  MOVLW  03
0301:  MOVWF  29
....................             } 
....................             else if(key == 'B') //Boton Backspace 
0302:  GOTO   308
0303:  MOVF   21,W
0304:  SUBLW  42
0305:  BTFSS  03.2
0306:  GOTO   308
....................             { 
....................                Contador = 0; 
0307:  CLRF   29
....................             } 
....................          } 
0308:  GOTO   2E7
....................          Contador = 0; 
0309:  CLRF   29
....................          ValorMinimo = Casillas[0] + (Casillas[1] * 10) + (Casillas[2] * 100); 
030A:  MOVF   26,W
030B:  MOVWF  2C
030C:  MOVLW  0A
030D:  MOVWF  2D
030E:  CALL   281
030F:  MOVF   78,W
0310:  ADDWF  25,W
0311:  MOVWF  2B
0312:  MOVF   27,W
0313:  MOVWF  2C
0314:  MOVLW  64
0315:  MOVWF  2D
0316:  CALL   281
0317:  MOVF   78,W
0318:  ADDWF  2B,W
0319:  MOVWF  24
....................          Estado = Ejecucion; 
031A:  MOVLW  01
031B:  MOVWF  22
....................       break; 
031C:  GOTO   338
....................       case Ejecucion: 
....................          key = AnalogKeypadRead(0); 
031D:  CLRF   2B
031E:  CALL   1FE
031F:  MOVF   78,W
0320:  MOVWF  21
....................          proceso(); 
....................          if(key != NO_KEY) 
0321:  MOVF   21,W
0322:  SUBLW  6E
0323:  BTFSC  03.2
0324:  GOTO   335
....................          { 
....................             if(key == 'A') 
0325:  MOVF   21,W
0326:  SUBLW  41
0327:  BTFSS  03.2
0328:  GOTO   32B
....................             { 
....................                Estado = Configuracion; 
0329:  CLRF   22
....................             } 
....................             else if(key == 'B') 
032A:  GOTO   334
032B:  MOVF   21,W
032C:  SUBLW  42
032D:  BTFSS  03.2
032E:  GOTO   332
....................             { 
....................                Estado = ConfiguracionDos; 
032F:  MOVLW  02
0330:  MOVWF  22
....................             } 
....................             else 
0331:  GOTO   334
....................             { 
....................                Estado = Ejecucion; 
0332:  MOVLW  01
0333:  MOVWF  22
....................             } 
....................          } 
....................          else 
0334:  GOTO   337
....................          { 
....................             Estado = Ejecucion; 
0335:  MOVLW  01
0336:  MOVWF  22
....................          } 
....................       break; 
0337:  GOTO   338
....................    } 
.................... } 
0338:  BCF    0A.3
0339:  BCF    0A.4
033A:  GOTO   356 (RETURN)
....................  
.................... void proceso(void) 
.................... { 
....................     
.................... } 
.................... char AnalogKeypadRead(unsigned int channel) 
.................... { 
....................    unsigned int data; 
....................    data = analogRead(channel); 
*
01FE:  MOVF   2B,W
01FF:  MOVWF  2D
0200:  GOTO   195
0201:  MOVF   78,W
0202:  MOVWF  2C
....................    switch(data) 
....................    { 
0203:  MOVF   2C,W
0204:  XORLW  01
0205:  BTFSC  03.2
0206:  GOTO   238
0207:  XORLW  03
0208:  BTFSC  03.2
0209:  GOTO   23C
020A:  XORLW  01
020B:  BTFSC  03.2
020C:  GOTO   240
020D:  XORLW  07
020E:  BTFSC  03.2
020F:  GOTO   244
0210:  XORLW  29
0211:  BTFSC  03.2
0212:  GOTO   248
0213:  XORLW  2B
0214:  BTFSC  03.2
0215:  GOTO   24C
0216:  XORLW  01
0217:  BTFSC  03.2
0218:  GOTO   250
0219:  XORLW  0F
021A:  BTFSC  03.2
021B:  GOTO   254
021C:  XORLW  01
021D:  BTFSC  03.2
021E:  GOTO   258
021F:  XORLW  03
0220:  BTFSC  03.2
0221:  GOTO   25C
0222:  XORLW  01
0223:  BTFSC  03.2
0224:  GOTO   260
0225:  XORLW  07
0226:  BTFSC  03.2
0227:  GOTO   264
0228:  XORLW  01
0229:  BTFSC  03.2
022A:  GOTO   268
022B:  XORLW  03
022C:  BTFSC  03.2
022D:  GOTO   26C
022E:  XORLW  01
022F:  BTFSC  03.2
0230:  GOTO   270
0231:  XORLW  1F
0232:  BTFSC  03.2
0233:  GOTO   274
0234:  XORLW  EF
0235:  BTFSC  03.2
0236:  GOTO   278
0237:  GOTO   27C
....................       case 1: 
....................          return 'A'; 
0238:  MOVLW  41
0239:  MOVWF  78
023A:  GOTO   280
....................       break; 
023B:  GOTO   280
....................       case 2: 
....................          return 'B'; 
023C:  MOVLW  42
023D:  MOVWF  78
023E:  GOTO   280
....................       break; 
023F:  GOTO   280
....................       case 3: 
....................          return 'C'; 
0240:  MOVLW  43
0241:  MOVWF  78
0242:  GOTO   280
....................       break; 
0243:  GOTO   280
....................       case 4: 
....................          return 'D'; 
0244:  MOVLW  44
0245:  MOVWF  78
0246:  GOTO   280
....................       break; 
0247:  GOTO   280
....................       case 557: 
....................          return '*'; 
0248:  MOVLW  2A
0249:  MOVWF  78
024A:  GOTO   280
....................       break; 
024B:  GOTO   280
....................       case 6: 
....................          return '#'; 
024C:  MOVLW  23
024D:  MOVWF  78
024E:  GOTO   280
....................       break; 
024F:  GOTO   280
....................       case 7: 
....................          return '0'; 
0250:  MOVLW  30
0251:  MOVWF  78
0252:  GOTO   280
....................       break; 
0253:  GOTO   280
....................       case 8: 
....................          return '1'; 
0254:  MOVLW  31
0255:  MOVWF  78
0256:  GOTO   280
....................       break; 
0257:  GOTO   280
....................       case 9: 
....................          return '2'; 
0258:  MOVLW  32
0259:  MOVWF  78
025A:  GOTO   280
....................       break; 
025B:  GOTO   280
....................       case 10: 
....................          return '3'; 
025C:  MOVLW  33
025D:  MOVWF  78
025E:  GOTO   280
....................       break; 
025F:  GOTO   280
....................       case 11: 
....................          return '4'; 
0260:  MOVLW  34
0261:  MOVWF  78
0262:  GOTO   280
....................       break; 
0263:  GOTO   280
....................       case 12: 
....................          return '5'; 
0264:  MOVLW  35
0265:  MOVWF  78
0266:  GOTO   280
....................       break; 
0267:  GOTO   280
....................       case 13: 
....................          return '6'; 
0268:  MOVLW  36
0269:  MOVWF  78
026A:  GOTO   280
....................       break; 
026B:  GOTO   280
....................       case 14: 
....................          return '7'; 
026C:  MOVLW  37
026D:  MOVWF  78
026E:  GOTO   280
....................       break; 
026F:  GOTO   280
....................       case 15: 
....................          return '8'; 
0270:  MOVLW  38
0271:  MOVWF  78
0272:  GOTO   280
....................       break; 
0273:  GOTO   280
....................       case 16: 
....................          return '9'; 
0274:  MOVLW  39
0275:  MOVWF  78
0276:  GOTO   280
....................       break; 
0277:  GOTO   280
....................       case 1023: 
....................          return NO_KEY; 
0278:  MOVLW  6E
0279:  MOVWF  78
027A:  GOTO   280
....................       break; 
027B:  GOTO   280
....................       default: 
....................          return NO_KEY; 
027C:  MOVLW  6E
027D:  MOVWF  78
027E:  GOTO   280
....................       break; 
027F:  GOTO   280
....................    } 
.................... } 
0280:  RETURN

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
